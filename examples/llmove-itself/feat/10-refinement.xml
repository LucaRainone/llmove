<prompt>
    In a previous interaction, in lib/plugins.js you wrote me this:

    <code>
        /* eslint-disable */
        const filterPlugins = [
        require('./plugins/filterIdentity')
        ];

        const parsePlugins = [
        require('./plugins/parseIdentity')
        ];

        async function runPlugins(xmlFiles) {
        let files = [...xmlFiles];

        // Run filter plugins
        for (const plugin of filterPlugins) {
        files = await plugin(files);
        }

        // Extract system, context, and prompt content
        let system = '';
        let context = '';
        let prompt = '';

        for (const file of files) {
        let content = file.content;

        // Run parse plugins on content
        for (const plugin of parsePlugins) {
        content = await plugin(content, file);
        }

        // Simple extraction based on tags
        const systemMatch = content.match(/<system[^>]*>([\s\S]*?)<\/system>/i);
        const contextMatch = content.match(/<context[^>]*>([\s\S]*?)<\/context>/i);
        const promptMatch = content.match(/<prompt[^>]*>([\s\S]*?)<\/prompt>/i);

        if (systemMatch) system += systemMatch[1].trim() + '\n';
        if (contextMatch) context += contextMatch[1].trim() + '\n';
        if (promptMatch) prompt += promptMatch[1].trim() + '\n';
        }

        const fullSystem = (system + '\n' + context).trim();

        return {
        files,
        system: fullSystem,
        prompt: prompt.trim()
        };
        }

        module.exports = { runPlugins };

    </code>
    This is not completely as I wanted. First of all, runPlugins should only run plugins and not parse files. So split them in two functions and two files.
    Then, don't parse content. Don't extract content in file.
    You must extract only the {specs}/root.xml (the main root) the version as attribute of system tag and store it and keep it available to plugins functions.

    Then write the code keeping in mind that the plugins that parse files MAY include other files that should be parsed as well. So manage the circular dependencies and the recursive parsing.

    In order to give you more context, write also the first plugin:
    * Follow `<include>` tags to resolve and inline additional XML files (recursively).
    * example: <include path="/relative/path/to/project" lines="8:19,100:115" parse="true"/>
    * the attribute "lines" is not mandatory and tells you that you have to include only the range of lines (from 8 to 19 and from 100 to 115)
    + the attribute parse="true" is not mandatory and tells you that the content must be parsed as well (if there are other include tag, exec the plugin. but also you must exec eventually other plugins). Default is false

</prompt>
