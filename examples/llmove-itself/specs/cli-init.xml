<feat><![CDATA[
    Create the file assets/default.root.xml with content <system version="1.0"></system>
    Create the file llmove.cjs. Here are the specifications:

    0. **Configuration**:
       * User should exec the command `llmove init`
       * this will ask you the antropic key and the model (empty for default claude-opus-4-20250514)
       * Ask for the specs folder (default "specs")
       * Store the information in a safer way (maybe in the home folder?). Consider the crossplatform problem
       * Then create the first specs/root.xml file with a default content. The default content is the one inside assets/default.root.xml

    1. **Execution Modes**:
        * load the global config vars
        * Creates a .llmove folder if not exists where stores peculiar file of the project
        * Recursively traverse `specs/`, collecting all `.xml` files.
        * Now I want a plugins system that parse these files. Plugins can remove files from the list and other plugins can manipulate the content.
        Plugins are stored in functions (one function for each plugin and one file per function). Divide plugins in two groups: one for filtering the list of files (called first), one for parsing the content (called later).
        * Write only one identity plugin per group for now.

    2. **Execution Modes 2 **:

        * If run with `--dryRun`: print cleaned system, context, and user prompt content to stdout, don't make an API call (exit)
        * If run with `--again`: re-apply the last API response from `.llmove/last-llmove-output.json` to write files again. Then exit.
        * Otherwise:
        * Check if the API_KEY is configured. Throw an error otherwise.
        * Calls the plugins
        * Send system + prompt content to an LLM API.
        * Expect a response with a list of files `{ path, content }`.
        * Write those files to disk. If a file already exists, append a timestamp to its name.
        * Cache the result in `.llmove/last-llmove-output.json`.
        * Track processed prompts in `.llmove/userPrompts.txt`.

    3. **API Call**:

        * Use HTTPS to send a POST request to the env variable API_URL (prefixed if it's configured) default api.anthropic.com
        * Include headers:

        * `x-api-key`: read from env
        * `Content-Type: application/json`
        * `anthropic-version: 2023-06-01` if the environment url is of anthropic
        * Request should include:

        * `model: as configured in env. but default is claude-opus-4-20250514
        * `system`: full system + context content
        * `messages`: a single user message with prompt content
        * A tool named `file_generator` that expects a list of files `{ path, content }` as output
        * Set `tool_choice` to always use `file_generator`

        4. **Helper Logic**:

        * Track file depth to sort system/context/prompt files deterministically.
        * Ensure directories exist before writing files.
        * If the file exists, don't overwrite it but create another file with the same name with suffix the current timestamp

        5. Your OUTPUT

        * Write the complete script as a single `.cjs` file
        * Use CommonJS modules (`require`, not `import`).
        * Disable any linter possible with proper comment at the beginning of file
        * Make the the llmove.cjs as small as possible. Separate logics in different files (plugin, API call, configs etc)

]]></feat>
